{"remainingRequest":"D:\\U3W-AIProject\\U3W-AI\\cube-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\U3W-AIProject\\U3W-AI\\cube-ui\\src\\views\\wechat\\chrome\\index.vue?vue&type=template&id=3cc1bfc8&scoped=true","dependencies":[{"path":"D:\\U3W-AIProject\\U3W-AI\\cube-ui\\src\\views\\wechat\\chrome\\index.vue","mtime":1753157550146},{"path":"D:\\U3W-AIProject\\U3W-AI\\cube-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1752387764959},{"path":"D:\\U3W-AIProject\\U3W-AI\\cube-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1752387756659},{"path":"D:\\U3W-AIProject\\U3W-AI\\cube-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1752387764959},{"path":"D:\\U3W-AIProject\\U3W-AI\\cube-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1752387756652}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}